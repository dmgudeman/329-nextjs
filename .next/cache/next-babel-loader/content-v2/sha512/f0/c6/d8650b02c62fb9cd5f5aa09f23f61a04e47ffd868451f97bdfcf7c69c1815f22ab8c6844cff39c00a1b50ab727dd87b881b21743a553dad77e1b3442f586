{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidgudeman/Udemy/329-nextjs/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nexport default function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"descrip[tion\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      description: props.meetupData.description,\n      address: props.meetupData.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://new_user02:' + encodeURIComponent('eZPoI2FwKaVhiRKz') + '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://new_user02:' + encodeURIComponent('eZPoI2FwKaVhiRKz') + '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/davidgudeman/Udemy/329-nextjs/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Fragment","Head","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","encodeURIComponent","db","meetupCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nexport default function MeetupDetails(props) {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name='descrip[tion' content={props.meetupData.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        description={props.meetupData.description}\n        address={props.meetupData.address}\n      />\n    </Fragment>\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://new_user02:' +\n      encodeURIComponent('eZPoI2FwKaVhiRKz') +\n      '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority'\n  );\n\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n\n  const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://new_user02:' +\n      encodeURIComponent('eZPoI2FwKaVhiRKz') +\n      '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority'\n  );\n\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}