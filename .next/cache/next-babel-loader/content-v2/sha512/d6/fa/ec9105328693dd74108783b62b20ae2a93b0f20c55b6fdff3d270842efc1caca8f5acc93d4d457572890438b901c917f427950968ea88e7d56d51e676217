{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidgudeman/Udemy/329-nextjs/pages/[meetupId]/index.js\";\nimport { MongoClient } from 'mongodb';\nimport { Fragment } from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nexport default function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.image,\n      title: props.title,\n      description: props.description,\n      address: props.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://new_user02:' + encodeURIComponent('eZPoI2FwKaVhiRKz') + '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://new_user02:' + encodeURIComponent('eZPoI2FwKaVhiRKz') + '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}","map":{"version":3,"sources":["/Users/davidgudeman/Udemy/329-nextjs/pages/[meetupId]/index.js"],"names":["MongoClient","Fragment","MeetupDetail","MeetupDetails","props","image","title","description","address","getStaticPaths","client","connect","encodeURIComponent","db","meetupCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,MAAA,KAAK,EAAED,KAAK,CAACE,KAFf;AAGE,MAAA,WAAW,EAAEF,KAAK,CAACG,WAHrB;AAIE,MAAA,OAAO,EAAEH,KAAK,CAACI;AAJjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,8BACEC,kBAAkB,CAAC,kBAAD,CADpB,GAEE,kEAHiB,CAArB;AAMA,QAAMC,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAAzB;AAEA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAtB;AACAT,EAAAA,MAAM,CAACU,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMhB,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,8BACEC,kBAAkB,CAAC,kBAAD,CADpB,GAEE,kEAHiB,CAArB;AAMA,QAAMC,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAAzB;AAEA,QAAMe,cAAc,GAAG,MAAMhB,gBAAgB,CAACiB,OAAjB,CAAyB;AAACb,IAAAA,GAAG,EAACQ;AAAL,GAAzB,CAA7B;AACAhB,EAAAA,MAAM,CAACU,KAAP;AACA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACL4B,MAAAA,UAAU,EAAEF;AADP;AADF,GAAP;AAKD","sourcesContent":["import { MongoClient } from 'mongodb';\nimport { Fragment } from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nexport default function MeetupDetails(props) {\n  return (\n    <Fragment>\n      <MeetupDetail\n        image={props.image}\n        title={props.title}\n        description={props.description}\n        address={props.address}\n      />\n    </Fragment>\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://new_user02:' +\n      encodeURIComponent('eZPoI2FwKaVhiRKz') +\n      '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority'\n  );\n\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n\n  const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\n    'mongodb+srv://new_user02:' +\n      encodeURIComponent('eZPoI2FwKaVhiRKz') +\n      '@cluster0.7mfmump.mongodb.net/meetup?retryWrites=true&w=majority'\n  );\n\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n\n  const selectedMeetup = await meetupCollection.findOne({_id:meetupId});\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}